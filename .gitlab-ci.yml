image: node:20-slim

stages:
  - test
  - build
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""

# Cache dependencies between jobs
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/

# Install dependencies
.dependencies: &dependencies
  - apt-get update && apt-get install -y python3 make g++
  - npm ci

# Create env files
.create_env_files: &create_env_files
  - |
    cat << EOF > .env.${CI_ENVIRONMENT_NAME}
    NODE_ENV=${CI_ENVIRONMENT_NAME}
    APP_PORT=${APP_PORT}
    DOMAIN_NAME=${DOMAIN_NAME}
    
    # Database
    DATABASE_HOST=postgres-${CI_ENVIRONMENT_NAME}
    DATABASE_PORT=5432
    DATABASE_USERNAME=${DATABASE_USERNAME}
    DATABASE_PASSWORD=${DATABASE_PASSWORD}
    DATABASE_NAME=${DATABASE_NAME}
    
    # JWT
    JWT_SECRET=${JWT_SECRET}
    JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
    JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
    JWT_REFRESH_EXPIRES_IN=${JWT_REFRESH_EXPIRES_IN}
    
    # Google OAuth
    GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
    GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
    GOOGLE_CALLBACK_URL=${GOOGLE_CALLBACK_URL}
    EOF

# Test stage
test:
  stage: test
  script:
    - *dependencies
    - npm run test
    - npm run test:e2e
  only:
    - merge_requests
    - main
    - develop

# Build stage
build:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - main
    - develop

# Deploy to development
deploy_dev:
  stage: deploy
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    CI_ENVIRONMENT_NAME: dev
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - *create_env_files
  script:
    - docker-compose -f docker-compose.dev.yml pull
    - docker-compose -f docker-compose.dev.yml up -d
  environment:
    name: development
    url: http://dev.your-domain.com
  only:
    - develop

# Deploy to production
deploy_prod:
  stage: deploy
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    CI_ENVIRONMENT_NAME: prod
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - *create_env_files
  script:
    - docker-compose -f docker-compose.prod.yml pull
    - docker-compose -f docker-compose.prod.yml up -d
  environment:
    name: production
    url: https://your-domain.com
  only:
    - main
  when: manual
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
      allow_failure: false 